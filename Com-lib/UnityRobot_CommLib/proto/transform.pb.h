// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#ifndef PROTOBUF_transform_2eproto__INCLUDED
#define PROTOBUF_transform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Communication {
namespace Transform {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_transform_2eproto();
void protobuf_AssignDesc_transform_2eproto();
void protobuf_ShutdownFile_transform_2eproto();

class Transform_;
class Vector3_;

// ===================================================================

class Vector3_ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Communication.Transform.Vector3_) */ {
 public:
  Vector3_();
  virtual ~Vector3_();

  Vector3_(const Vector3_& from);

  inline Vector3_& operator=(const Vector3_& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3_& default_instance();

  void Swap(Vector3_* other);

  // implements Message ----------------------------------------------

  inline Vector3_* New() const { return New(NULL); }

  Vector3_* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3_& from);
  void MergeFrom(const Vector3_& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3_* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Communication.Transform.Vector3_)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_transform_2eproto();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
  static Vector3_* default_instance_;
};
// -------------------------------------------------------------------

class Transform_ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Communication.Transform.Transform_) */ {
 public:
  Transform_();
  virtual ~Transform_();

  Transform_(const Transform_& from);

  inline Transform_& operator=(const Transform_& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform_& default_instance();

  void Swap(Transform_* other);

  // implements Message ----------------------------------------------

  inline Transform_* New() const { return New(NULL); }

  Transform_* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform_& from);
  void MergeFrom(const Transform_& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform_* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Communication.Transform.Vector3_ position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::Communication::Transform::Vector3_& position() const;
  ::Communication::Transform::Vector3_* mutable_position();
  ::Communication::Transform::Vector3_* release_position();
  void set_allocated_position(::Communication::Transform::Vector3_* position);

  // optional .Communication.Transform.Vector3_ rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::Communication::Transform::Vector3_& rotation() const;
  ::Communication::Transform::Vector3_* mutable_rotation();
  ::Communication::Transform::Vector3_* release_rotation();
  void set_allocated_rotation(::Communication::Transform::Vector3_* rotation);

  // @@protoc_insertion_point(class_scope:Communication.Transform.Transform_)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_rotation();
  inline void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Communication::Transform::Vector3_* position_;
  ::Communication::Transform::Vector3_* rotation_;
  friend void  protobuf_AddDesc_transform_2eproto();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
  static Transform_* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3_

// required float x = 1;
inline bool Vector3_::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3_::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3_::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3_::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3_::x() const {
  // @@protoc_insertion_point(field_get:Communication.Transform.Vector3_.x)
  return x_;
}
inline void Vector3_::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Communication.Transform.Vector3_.x)
}

// required float y = 2;
inline bool Vector3_::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3_::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3_::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3_::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3_::y() const {
  // @@protoc_insertion_point(field_get:Communication.Transform.Vector3_.y)
  return y_;
}
inline void Vector3_::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Communication.Transform.Vector3_.y)
}

// required float z = 3;
inline bool Vector3_::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3_::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3_::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3_::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3_::z() const {
  // @@protoc_insertion_point(field_get:Communication.Transform.Vector3_.z)
  return z_;
}
inline void Vector3_::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Communication.Transform.Vector3_.z)
}

// -------------------------------------------------------------------

// Transform_

// required .Communication.Transform.Vector3_ position = 1;
inline bool Transform_::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transform_::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transform_::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transform_::clear_position() {
  if (position_ != NULL) position_->::Communication::Transform::Vector3_::Clear();
  clear_has_position();
}
inline const ::Communication::Transform::Vector3_& Transform_::position() const {
  // @@protoc_insertion_point(field_get:Communication.Transform.Transform_.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Communication::Transform::Vector3_* Transform_::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::Communication::Transform::Vector3_;
  }
  // @@protoc_insertion_point(field_mutable:Communication.Transform.Transform_.position)
  return position_;
}
inline ::Communication::Transform::Vector3_* Transform_::release_position() {
  // @@protoc_insertion_point(field_release:Communication.Transform.Transform_.position)
  clear_has_position();
  ::Communication::Transform::Vector3_* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Transform_::set_allocated_position(::Communication::Transform::Vector3_* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:Communication.Transform.Transform_.position)
}

// optional .Communication.Transform.Vector3_ rotation = 2;
inline bool Transform_::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transform_::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transform_::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transform_::clear_rotation() {
  if (rotation_ != NULL) rotation_->::Communication::Transform::Vector3_::Clear();
  clear_has_rotation();
}
inline const ::Communication::Transform::Vector3_& Transform_::rotation() const {
  // @@protoc_insertion_point(field_get:Communication.Transform.Transform_.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::Communication::Transform::Vector3_* Transform_::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::Communication::Transform::Vector3_;
  }
  // @@protoc_insertion_point(field_mutable:Communication.Transform.Transform_.rotation)
  return rotation_;
}
inline ::Communication::Transform::Vector3_* Transform_::release_rotation() {
  // @@protoc_insertion_point(field_release:Communication.Transform.Transform_.rotation)
  clear_has_rotation();
  ::Communication::Transform::Vector3_* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Transform_::set_allocated_rotation(::Communication::Transform::Vector3_* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:Communication.Transform.Transform_.rotation)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Transform
}  // namespace Communication

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transform_2eproto__INCLUDED
